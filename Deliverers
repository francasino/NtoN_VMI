pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

/*
COPYRIGHT FRAN CASINO. 2019.
SECURITY CHECKS ARE COMMENTED FOR AN EASY USE TEST.
UNCOMMENT THE CODE FOR A FULLY FUNCTIONAL VERSION. 
YOU WILL NEED TO USE METAMASK OR OTHER EXTENSIONS TO USE THE REQUIRED ADDRESSES
ACTUALLY DATA ARE STORED IN THE SC. TO ENABLE IPFS, FUNCTIONS WILL NOT STORE the values and just the hash in the structs.
This can be changed in the code by calling the hash creation function. 
Nevertheless, the code is kept clear for the sake of understanding. 
TODO - Add into the hash algorithm the structs of the token. Now only initial info is hashed. 
*/

contract Deliverers{
 
    struct Deliverer{
        uint id; // this especific process, containing id and quantity
        string name; // the vendor
        string timestamp; //
        string description; // other info
        address maker; // who registered
        bool active;
        string hashIPFS; // hash of the elements of the struct, for auditing AND IPFS 
    }

    mapping(uint => Deliverer) private delivererChanges; //

    uint private delivererCount;

    // events, since SC is for global accounts it does not have too much sense but is left here 
    event updateEvent ( // triggers update complete
    );
    
    event changeStatusEvent ( // triggers status change
    );

    address constant public deliverer = 0xE0f5206BBD039e7b0592d8918820024e2a7437b9; // who registers the token into system. 
    address constant public deliverer2 = 0xE0F5206bbd039e7b0592d8918820024E2A743222;

    constructor () public { // constructor, inserts new token in system. we map starting from id=1, hardcoded values of all
        addRetailer("Deliverer","1130009112019","Local deliverer of vegetables"); //
        
    }
    
    // add deliverer to the list
    function addDeliverer(string memory _name, string memory _timestamp, string memory _description) public {
        
        delivererCount++;
        delivererChanges[delivererCount].id = delivererCount;
        delivererChanges[delivererCount].name = _name; 
        delivererChanges[delivererCount].timestamp = _timestamp; 
        delivererChanges[delivererCount].description = _description; 
        delivererChanges[delivererCount].active = true; 
        delivererChanges[delivererCount].maker = msg.sender;
        emit updateEvent(); // trigger event 
    }

    function changeStatus (uint memory _id, bool memory _active) public {
        require(_id > 0 && _id <= delivererCount); 
        delivererChanges[delivererCount].active = _active;
        emit changeStatusEvent(); // trigger event 
    }

    function getDeliverer (uint memory _id) public view returns (Deliverer memory)  {
        require(_id > 0 && _id <= delivererCount);  
        require(msg.sender == delivererChanges[_id].maker); // only if he is the author of the content
        
        return delivererChanges[_id];
    }
    
    // returns global number of status, needed to iterate the mapping and to know info.
    function getNumberOfDeliverers () public view returns (uint){    
        //tx.origin
        return delivererCount;
    }

}
